syntax = "proto3";
package th2.utility;

import "th2/infra.proto";

option java_multiple_files = true;
option java_package = "com.exactpro.th2.utility.messagecomparator.grpc";

service MessageComparatorService {
    // Compare one filter versus some messages
    rpc compareFilterVsMessages (CompareFilterVsMessagesRequest) returns (CompareFilterVsMessagesResponse);
    // Compare one message versus one message
    rpc compareMessageVsMessage (CompareMessageVsMessageRequest) returns (CompareMessageVsMessageResponse);
}

//--// Settings //--//
message ComparisonSettings {
    repeated string ignore_fields = 1;
}

//--// Compare filter versus messages //--//

message CompareFilterVsMessagesRequest {
    MessageFilter filter = 1;
    repeated Message messages = 2;
    ComparisonSettings settings = 3;
}

message CompareFilterVsMessagesResponse {
    repeated CompareFilterVsMessageResult comparison_results = 1;
}

message CompareFilterVsMessageResult {
    MessageID message_id = 1;
    ComparisonEntry comparison_result = 2;
}

//--// Compare message versus message //--//

message CompareMessageVsMessageRequest {
    repeated CompareMessageVsMessageTask comparison_tasks = 1;
}

message CompareMessageVsMessageResponse {
    repeated CompareMessageVsMessageResult comparison_results = 1;
}

message CompareMessageVsMessageTask {
    Message first = 1;
    Message second = 2;
    ComparisonSettings settings = 3;
}

message CompareMessageVsMessageResult {
    MessageID first_message_id = 1;
    MessageID second_message_id = 2;
    ComparisonEntry comparison_result = 3;
}

//--// Common entry //--//

message ComparisonEntry {
    ComparisonEntryType type = 1; // isn't set for root entry otherwise it is required
    ComparisonEntryStatus status = 2; // isn't set for collection entry type otherwise it is required
    string first = 3; // This value is null for root entry otherwise it is required
    string second = 4; // This value is null for root entry otherwise it is required
    FilterOperation operation = 5; // isn't set for root entry otherwise it is required
    bool is_key = 6; // is null for root entry otherwise it is required
    map<string, ComparisonEntry> fields = 7;
}

enum ComparisonEntryType {
    FIELD = 0;
    COLLECTION = 1;
}

enum ComparisonEntryStatus {
    NA = 0;
    PASSED = 1;
    FAILED = 2;
}